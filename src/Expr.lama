-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (string, expr)       |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Scope  (def list, expr)     |
--        Call   (string, expr list)  |
--        Ignore (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Local (string list)                |
--       Fun   (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun mapNamesToValues(state, names, values) {
  foldl(fun(s, [name, val]) {
    s.addName(name, Var(val))
  }, state, zip(names, values))
}

fun evalDefs(state, defs) {
  foldl(fun(s, def) {
    case def of
        Local(names) -> s.addNames(names)
      | Fun(name, args, body) -> s.addFunction(name, args, body)
    esac
  }, state, defs)
}

fun eval (c@[s, w], expr) {
  case expr of
      Assn(x, e) -> case evalList(c, {x, e}) of 
        [[s2, w2], {Ref(xRes), val}] -> [[s2 <- [xRes, Var(val)], w2], val]
      esac
    | Seq(e1, e2) -> case eval(c, e1) of [c2, _] -> eval(c2, e2) esac
    | Skip -> [c, Nothing]
    | Read(x) -> checkVar(s, x); case readWorld(w) of 
        [val, w2] -> [[s <- [x, Var(val)], w2], Nothing]
      esac
    | Write(e) -> case eval(c, e) of [[s2, w2], val] -> [[s2, writeWorld(val, w2)], Nothing] esac
    | If(cond, eThen, eElse) -> case eval(c, cond) of 
          [c2, 0] -> eval(c2, eElse)
        | [c2, _] -> eval(c2, eThen)
      esac
    | While(cond, eDo) -> case eval(c, cond) of 
          [c2, 0] -> [c2, Nothing]
        | [c2, _] -> case eval(c2, eDo) of [c3, _] -> eval(c3, expr) esac
      esac
    | Repeat(eDo, cond) -> case eval(c, eDo) of
        [c2, _] -> case eval(c2, cond) of
            [c3, 0] -> eval(c3, expr)
          | [c3, _] -> [c3, Nothing]
        esac
      esac
    | Var(x) -> checkVar(s, x); [c, case lookup(s, x) of Var(v) -> v esac]
    | Ref(x) -> checkVar(s, x); [c, expr]
    | Const(val) -> [c, val]
    | Binop(op, l, r) -> case evalList(c, {l, r}) of 
        [c2, {lRes, rRes}] -> [c2, evalOp(op, lRes, rRes)]
      esac
    | Ignore(e) -> case eval(c, e) of [c2, _] -> [c2, Nothing] esac
    | Scope(defs, e) -> case eval([evalDefs(enterScope(s), defs), w], e) of 
        [[s2, w2], res] -> [[leaveScope(s2), w2], res]
      esac
    | Call(name, args) -> checkFun(s, name); case s.lookup(name) of
        Fun(names, body) -> case evalList(c, args) of
          [[s2, w2], values] -> case eval([mapNamesToValues(enterFunction(s2), names, values), w2], body) of
            [[s3, w3], res] -> [[leaveFunction(s2, getGlobal(s3)), w3], res]
          esac
        esac
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
