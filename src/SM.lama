-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  local globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, val) {
    case loc of
      Arg (i) -> args[i] := val
    | Loc (i) -> locs[i] := val
    | Glb (x) -> local g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then val else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[stack, cstack, st, w], insns) {
    case insns of
        CONST(c):other -> eval([c:stack, cstack, st, w], other)
      | BINOP(op):other -> case stack of
          r:l:rest -> eval([evalOp(op, l, r):rest, cstack, st, w], other)
        esac
      | LD(x):other -> eval([lookup(st, x):stack, cstack, st, w], other)
      | LDA(x):other -> eval([Ref(x):stack, cstack, st, w], other)
      | ST(x):other -> case stack of
          head:_ -> assign(st, x, head); eval([stack, cstack, st, w], other)
        esac
      | STI:other -> case stack of
          head:Ref(x):rest -> assign(st, x, head); eval([head:rest, cstack, st, w], other)
        esac
      | READ:other -> case readWorld(w) of
          [val, w2] -> eval([val:stack, cstack, st, w2], other)
        esac
      | WRITE:other -> case stack of
          head:rest -> eval([rest, cstack, st, writeWorld(head, w)], other)
        esac
      | LABEL(l):other -> eval([stack, cstack, st, w], other)
      | JMP(l):other -> eval([stack, cstack, st, w], fromLabel(env, l))
      | CJMP(c, l):other -> case c of 
          "z" -> case stack of
                0:rest -> eval([rest, cstack, st, w], fromLabel(env, l))
              | _:rest -> eval([rest, cstack, st, w], other)
            esac
        | "nz" -> case stack of
                0:rest -> eval([rest, cstack, st, w], other)
              | _:rest -> eval([rest, cstack, st, w], fromLabel(env, l))
            esac
        esac
      | DROP:other -> case stack of _:rest -> eval([rest, cstack, st, w], other) esac
      | END:other -> case cstack of
            [locSt, op]:rest -> eval([stack, rest, locSt, w], op)
          | {} -> c
        esac
      | BEGIN(f, a, l):other -> case take(stack, a) of
          [rest, args] -> case makeState(a, l) of 
            locSt -> foldl(fun(i, arg) { assign(locSt, Arg(i), arg); i+1 }, 0, args);
                     eval([rest, cstack, locSt, w], other)
          esac
        esac
      | CALL(f, n):other -> eval([stack, [st, other]:cstack, st, w], fromLabel(env, f))
      | GLOBAL(x):other -> assign(st, Glb(x), 0); eval([stack, cstack, st, w], other)
      | {} -> [stack, st, w]
    esac
  }  
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (stmt) {
  fun compileIf(env, expr, stmt1, stmt2) {
    case genLabels(env, 2) of [lStmt1, lEnd, env2] ->
      case compile(stmt1, env2) of [res1, env3] ->
        case compile(stmt2, env3) of [res2, env4] -> 
          case compile(expr, env4) of [eRes, env5] ->
            [{
              eRes,
              CJMP("nz", lStmt1),
              res2,
              JMP(lEnd),
              LABEL(lStmt1),
              res1,
              LABEL(lEnd)
            }, env4]
          esac
        esac
      esac
    esac
  }

  fun compileWhile(env, expr, stmt) {
    case genLabels(env, 2) of [lExpr, lStmt, env2] ->
      case compile(stmt, env2) of [res, env3] ->
        case compile(expr, env3) of [eRes, env4] ->
          [{
            JMP(lExpr),
            LABEL(lStmt),
            res,
            LABEL(lExpr),
            eRes,
            CJMP("nz", lStmt)
          }, env3]
        esac
      esac
    esac
  }

  fun compileRepeat(env, stmt, expr) {
    case genLabel(env) of [lStmt, env2] ->
      case compile(stmt, env2) of [res, env3] ->
        case compile(expr, env3) of [eRes, env4] ->
          [{
            LABEL(lStmt),
            res,
            eRes,
            CJMP("z", lStmt)
          }, env3]
        esac
      esac
    esac
  }

  fun compileCall(f, args, env) {
    case foldl(fun([cargs, env], arg) {
        case compile(arg, env) of [carg, env] -> [cargs:carg, env] esac
      }, [{}, env], args) of
        [cargs, env] -> [case lookupFun(env, f) of Fun(fLbl, n) -> { cargs, CALL(fLbl, n) } esac, env]
    esac
  }

  fun compileScope(defs, e, env) {
    case foldl(fun ([env, funs, globalDefs], def) {
        case def of
          Local(ds) -> [addVars(env, ds),
                         funs, 
                         { if isGlobal(env) then map (fun (x) {GLOBAL(x)}, ds) else {} fi, globalDefs }]
        | Fun (f, args, body) -> case genFunLabel(env, f) of [fLbl, env] ->
              [addFun(env, f, fLbl, args.size), [fLbl, args, body] : funs, globalDefs]
            esac
        esac
      }, [beginScope(env), {}, {}], defs) of [env, funs, globalDefs] ->
      case compile(e, foldl(fun(env, [name, args, body]) { rememberFun(env, name, args, body) }, env, funs)) of 
        [res, env] -> [{ globalDefs, res }, endScope(env)]
      esac
    esac
  }

  fun compileFunctions(stmts, env) {
    fun iterate(functions, stmts, env) {
      case functions of
          {} -> case getFuns(env) of
                [{}, env] -> stmts
              | [fs, env] -> iterate(fs, stmts, env)
            esac
        | Fun(f, args, body, st):rest ->
            case compile(body, addArgs(beginFun(env, st), args)) of [code, env] ->
              iterate(rest, {
                stmts,
                LABEL(f),
                BEGIN(f, args.size, getLocals(env)),
                code,
                END
              }, env)
            esac
      esac
    }

    iterate({}, stmts, env)
  }

  fun compile(stmt, env) {
    case stmt of
        Const(c) -> [singleton(CONST(c)), env]
      | Var(x) -> [singleton(LD(lookupVar(env, x))), env]
      | Binop(op, l, r) -> case compile(l, env) of
          [lRes, env2] -> case compile(r, env2) of
            [rRes, env3] -> [{ lRes, rRes, BINOP(op) }, env3]
          esac
        esac
      | Assn(x, e) -> case compile(x, env) of
          [xRes, env2] -> case compile(e, env2) of
            [eRes, env3] -> [{ xRes, eRes, STI }, env3]
          esac
        esac
      | Assn(Ref(x), e) -> case compile(e, env) of
          [eRes, env2] ->[{ eRes, ST(lookupVar(env2, x)) }, env2]
        esac
      | Read(x) -> [{ READ, ST(lookupVar(env, x)), DROP }, env]
      | Write(val) -> case compile(val, env) of [res, env2] -> [{ res, WRITE }, env2] esac
      | Seq(stmt1, stmt2) -> case compile(stmt1, env) of
          [res1, env2] -> case compile(stmt2, env2) of
            [res2, env3] -> [{res1, res2}, env3]
          esac
        esac
      | If(expr, stmt1, stmt2) -> compileIf(env, expr, stmt1, stmt2)
      | While(expr, stmt1) -> compileWhile(env, expr, stmt1)
      | Repeat(stmt1, expr) -> compileRepeat(env, stmt1, expr)
      | Skip -> [{}, env]
      | Ref(x) -> [singleton(LDA(lookupVar(env, x))), env]
      | Ignore(e) -> case compile(e, env) of [res, env2] -> [{ res, DROP }, env2] esac
      | Call(f, args) -> compileCall(f, args, env)
      | Scope(defs, e) -> compileScope(defs, e, env)
    esac
  }

  case compile(stmt, initCompEnv()) of [stmts, env] ->
    deepFlatten $
    compileFunctions({
      LABEL("main"),
      BEGIN("main", 0, getLocals(env)),
      stmts,
      END
    }, env)
  esac
}
